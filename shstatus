#!/usr/bin/env bash

err() {
    # Display a red message in the bar
    echo "[{\"color\":\"#ff0000\",\"full_text\":\"$*\"}]"
    sleep infinity
}

block() {
    # Begin the block
    echo -n "{"

    # Print all variables
    [[ -n $full_text ]] && echo -n "\"full_text\":\"$full_text\""
    [[ -n $short_text ]] && echo -n ",\"short_text\":\"$short_text\""
    [[ -n $color ]] && echo -n ",\"color\":\"$color\""
    [[ -n $background ]] && echo -n ",\"background\":\"$background\""
    [[ -n $border ]] && echo -n ",\"border\":\"$border\""
    [[ -n $border_top ]] && echo -n ",\"border_top\":$border_top"
    [[ -n $border_bottom ]] && echo -n ",\"border_bottom\":$border_bottom"
    [[ -n $border_left ]] && echo -n ",\"border_left\":$border_left"
    [[ -n $border_right ]] && echo -n ",\"border_right\":$border_right"
    [[ -n $min_width ]] && echo -n ",\"min_width\":\"$min_width\""
    [[ -n $align ]] && echo -n ",\"align\":\"$align\""
    [[ -n $urgent ]] && echo -n ",\"urgent\":$urgent"
    [[ -n $separator ]] && echo -n ",\"separator\":$separator"
    [[ -n $separator_block_width ]] && echo -n ",\"separator_block_width\":$separator_block_width"

    # End the block
    echo -n "},"
}

block_battery() {
    local percentage status
    [[ -z $1 || ! -d /sys/class/power_supply/$1 ]] && return
    read -r percentage < "/sys/class/power_supply/$1/capacity"
    read -r status < "/sys/class/power_supply/$1/status"

    if [[ -n $full_text ]]; then
        local full_text="${full_text/\%percentage/$percentage%}"
        full_text="${full_text/\%status/$status}"
    fi
    if [[ -n $short_text ]]; then
        local short_text="${short_text/\%percentage/$percentage%}"
        short_text="${short_text/\%status/$status}"
    fi

    block
}

block_disk() {
    local disk size used avail usepercent mountpoint dfinfo
    ! dfinfo="$(df -h "$1")" && return

    # Remove the header
    dfinfo="${dfinfo#*$'\n'}"
    IFS=" " read -r disk size used avail usepercent mountpoint <<< "$dfinfo"

    if [[ -n $full_text ]]; then
        local full_text="${full_text/\%disk/$disk}"
        full_text="${full_text/\%size/$size}"
        full_text="${full_text/\%used/$used}"
        full_text="${full_text/\%avail/$avail}"
        full_text="${full_text/\%usepercent/$usepercent}"
        full_text="${full_text/\%mountpoint/$mountpoint}"
    fi
    if [[ -n $short_text ]]; then
        local short_text="${short_text/\%disk/$disk}"
        short_text="${short_text/\%size/$size}"
        short_text="${short_text/\%used/$used}"
        short_text="${short_text/\%avail/$avail}"
        short_text="${short_text/\%usepercent/$usepercent}"
        short_text="${short_text/\%mountpoint/$mountpoint}"
    fi

    block
}

block_loadavg() {
    local load1 load5 load15
    IFS=" " read -r load1 load5 load15 _ _ < /proc/loadavg

    if [[ -n $full_text ]]; then
        local full_text="${full_text/\%load1/$load1}"
        full_text="${full_text/\%load5/$load5}"
        full_text="${full_text/\%load15/$load15}"
    fi
    if [[ -n $short_text ]]; then
        local short_text="${short_text/\%load1/$load1}"
        short_text="${short_text/\%load5/$load5}"
        short_text="${short_text/\%load15/$load15}"
    fi

    block
}

block_mem() {
    local memtotal memused memavail swaptotal swapused swapavail
    free="$(free -h)"

    # Remove the header
    free="${free#*$'\n'}"

    # Read the first line, remove it, then read the second line
    IFS=" " read -r _ memtotal memused _ _ _ memavail <<< "$free"
    free="${free#*$'\n'}"
    IFS=" " read -r _ swaptotal swapused swapavail <<< "$free"

    if [[ -n $full_text ]]; then
        local full_text="${full_text/\%memtotal/$memtotal}"
        full_text="${full_text/\%memused/$memused}"
        full_text="${full_text/\%memavail/$memavail}"
        full_text="${full_text/\%swaptotal/$swaptotal}"
        full_text="${full_text/\%swapused/$swapused}"
        full_text="${full_text/\%swapavail/$swapavail}"
    fi
    if [[ -n $short_text ]]; then
        local short_text="${short_text/\%memtotal/$memtotal}"
        short_text="${short_text/\%memused/$memused}"
        short_text="${short_text/\%memavail/$memavail}"
        short_text="${short_text/\%swaptotal/$swaptotal}"
        short_text="${short_text/\%swapused/$swapused}"
        short_text="${short_text/\%swapavail/$swapavail}"
    fi

    block
}

block_pavol() {
    local vol mutestatus
    vol="$(pactl get-sink-volume "$1" 2> /dev/null | \
        awk -F'/' '{ print $2 }')"
    [[ -z $vol ]] && return
    vol="${vol//[[:space:]]/}"

    mutestatus="$(pactl get-sink-mute "$1" 2> /dev/null)"
    [[ -z $mutestatus ]] && return
    if [[ $mutestatus == *yes* ]]; then
        mutestatus="$2"
    else
        mutestatus=""
    fi

    if [[ -n $full_text ]]; then
        local full_text="${full_text/\%vol/$vol}"
        full_text="${full_text/\%mutestatus/$mutestatus}"
    fi
    if [[ -n $short_text ]]; then
        local short_text="${short_text/\%vol/$vol}"
        short_text="${short_text/\%mutestatus/$mutestatus}"
    fi

    block
}

block_pwvol() {
    local vol mutestatus
    IFS=" " read -r _ vol mutestatus <<< "$(wpctl get-volume "$1" 2> /dev/null)"
    [[ -z $vol ]] && return
    vol="${vol/./}"
    vol=$((10#$vol))

    if [[ $mutestatus == "[MUTED]" ]]; then
        mutestatus="$2"
    else
        mutestatus=""
    fi

    if [[ -n $full_text ]]; then
        local full_text="${full_text/\%vol/$vol%}"
        full_text="${full_text/\%mutestatus/$mutestatus}"
    fi
    if [[ -n $short_text ]]; then
        local short_text="${short_text/\%vol/$vol%}"
        short_text="${short_text/\%mutestatus/$mutestatus}"
    fi

    block
}

block_datetime() {
    local date
    date="$(date "+$1")"

    [[ -n $full_text ]] && local full_text="${full_text/\%date/$date}"
    [[ -n $short_text ]] && local short_text="${short_text/\%date/$date}"

    block
}

case "$1" in
    "help" | "-h" | "--help") cat << EOF
Usage: $(basename "$0") [config-file]
See 'man shstatus' for more information
EOF
    exit 0
esac

# Print the header and begin an infinite array
echo '{"version":1}'
echo "["

config="/etc/shstatus/config.sh"
[[ -f "$HOME/.config/shstatus/config.sh" ]] && config="$HOME/.config/shstatus/config.sh"
[[ -n $1 ]] && config="$1"
[[ ! -f $config ]] && err "'$config': not a file"

# shellcheck disable=1090
source "$config"

[[ -z $interval ]] && err "interval not specified"
[[ $(type -t update) != "function" ]] && err "update() is undefined"

while true; do
    # Begin an array of blocks
    echo "["

    # Remove the trailing comma and print the blocks
    blocks="$(update)"
    echo -n "${blocks::-1}"

    # End the array
    echo -e "\n],"
    sleep "$interval"
done
