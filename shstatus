#!/usr/bin/env bash

# shstatus - a simple statusline generator for i3bar and swaybar
# https://github.com/acuteenvy/shstatus
# License: MIT

# Display a red message in the bar.
err() {
    printf '[{"color":"#ff0000","full_text":"%s"}]\n' "$*"
    snore
}

# Open a file descriptor that does not output anything.
exec {snore_fd}<> <(:)

# Sleep function in pure bash.
# Usage: snore <time in seconds>
# If called without arguments, it will sleep forever.
snore() {
    # Read the fd and stop after $1 seconds.
    read ${1:+"-t$1"} -ru "$snore_fd"
}

# Block generator.
# This function should always be called without any arguments.
block() {
    # Begin the block.
    printf "{"

    # Print all variables.
    [[ -n $full_text ]]             && printf '"full_text":"%s"'            "$full_text"
    [[ -n $short_text ]]            && printf ',"short_text":"%s"'          "$short_text"
    [[ -n $color ]]                 && printf ',"color":"%s"'               "$color"
    [[ -n $background ]]            && printf ',"background":"%s"'          "$background"
    [[ -n $border ]]                && printf ',"border":"%s"'              "$border"
    [[ -n $border_top ]]            && printf ',"border_top":%s'            "$border_top"
    [[ -n $border_bottom ]]         && printf ',"border_bottom":%s'         "$border_bottom"
    [[ -n $border_left ]]           && printf ',"border_left":%s'           "$border_left"
    [[ -n $border_right ]]          && printf ',"border_right":%s'          "$border_right"
    [[ -n $min_width ]]             && printf ',"min_width":"%s"'           "$min_width"
    [[ -n $align ]]                 && printf ',"align":"%s"'               "$align"
    [[ -n $urgent ]]                && printf ',"urgent":%s'                "$urgent"
    [[ -n $separator ]]             && printf ',"separator":%s'             "$separator"
    [[ -n $separator_block_width ]] && printf ',"separator_block_width":%s' "$separator_block_width"

    # End the block.
    printf "},"
}

block_backlight() {
    local -r path="/sys/class/backlight"
    [[ $# -lt 2 || ! -d $path/$1 || ! -f $path/$1/$2 ]] && return

    local current max percentage

    read -r current < "$path/$1/$2"
    read -r max < "$path/$1/max_brightness"
    local percentage=$((current * 100 / max))

    if [[ -n $full_text ]]; then
        local full_text="${full_text/\%current/$current}"
        full_text="${full_text/\%max/$max}"
        full_text="${full_text/\%percentage/$percentage%}"
    fi
    if [[ -n $short_text ]]; then
        local short_text="${short_text/\%current/$current}"
        short_text="${short_text/\%max/$max}"
        short_text="${short_text/\%percentage/$percentage%}"
    fi

    block
}

block_battery() {
    local -r path="/sys/class/power_supply"
    [[ $# -lt 4 || ! -d $path/$1 || ! -f $path/$1/capacity ]] && return

    local percentage status

    read -r percentage < "$path/$1/capacity"
    read -r status < "$path/$1/status"
    case $status in
        Charging) status="$2";;
        Discharging) status="$3";;
        Full) status="$4";;
    esac

    if [[ -n $full_text ]]; then
        local full_text="${full_text/\%percentage/$percentage%}"
        full_text="${full_text/\%status/$status}"
    fi
    if [[ -n $short_text ]]; then
        local short_text="${short_text/\%percentage/$percentage%}"
        short_text="${short_text/\%status/$status}"
    fi

    block
}

block_disk() {
    [[ $# -lt 1 ]] && return

    local disk size used avail usepercent mountpoint dfinfo
    ! dfinfo="$(df -h "$1")" && return

    # Remove the header.
    dfinfo="${dfinfo#*$'\n'}"
    IFS=" " read -r disk size used avail usepercent mountpoint <<< "$dfinfo"

    if [[ -n $full_text ]]; then
        local full_text="${full_text/\%disk/$disk}"
        full_text="${full_text/\%size/$size}"
        full_text="${full_text/\%used/$used}"
        full_text="${full_text/\%avail/$avail}"
        full_text="${full_text/\%usepercent/$usepercent}"
        full_text="${full_text/\%mountpoint/$mountpoint}"
    fi
    if [[ -n $short_text ]]; then
        local short_text="${short_text/\%disk/$disk}"
        short_text="${short_text/\%size/$size}"
        short_text="${short_text/\%used/$used}"
        short_text="${short_text/\%avail/$avail}"
        short_text="${short_text/\%usepercent/$usepercent}"
        short_text="${short_text/\%mountpoint/$mountpoint}"
    fi

    block
}

block_loadavg() {
    local load1 load5 load15
    IFS=" " read -r load1 load5 load15 _ _ < /proc/loadavg

    if [[ -n $full_text ]]; then
        local full_text="${full_text/\%load1/$load1}"
        full_text="${full_text/\%load5/$load5}"
        full_text="${full_text/\%load15/$load15}"
    fi
    if [[ -n $short_text ]]; then
        local short_text="${short_text/\%load1/$load1}"
        short_text="${short_text/\%load5/$load5}"
        short_text="${short_text/\%load15/$load15}"
    fi

    block
}

PREV_TOTAL=0
PREV_IDLE=0
block_cpu() {
    local stat user nice system idle iowait irq softirq steal guest guest_nice
    stat="$(</proc/stat)"
    # Get the first line from /proc/stat
    stat="${stat%%$'\n'*}"
    read -r _ user nice system idle iowait irq softirq steal guest guest_nice <<< "$stat"

    local total diff_total diff_idle usage
    total=$((user + nice + system + idle + iowait + irq + softirq + steal + guest + guest_nice))

    diff_total=$((total - PREV_TOTAL))
    diff_idle=$((idle - PREV_IDLE))
    usage=$(( 100 * (diff_total - diff_idle) / diff_total ))

    PREV_TOTAL="$total"
    PREV_IDLE="$idle"

    [[ -n $full_text ]] && local full_text="${full_text/\%usage/$usage}"
    [[ -n $short_text ]] && local short_text="${short_text/\%usage/$usage}"

    block
}

block_mem() {
    local free memtotal memused memavail swaptotal swapused swapavail
    free="$(free -h)"

    # Remove the header.
    free="${free#*$'\n'}"

    # Read the first line, remove it, then read the second line.
    IFS=" " read -r _ memtotal memused _ _ _ memavail <<< "$free"
    free="${free#*$'\n'}"
    IFS=" " read -r _ swaptotal swapused swapavail <<< "$free"

    if [[ -n $full_text ]]; then
        local full_text="${full_text/\%memtotal/$memtotal}"
        full_text="${full_text/\%memused/$memused}"
        full_text="${full_text/\%memavail/$memavail}"
        full_text="${full_text/\%swaptotal/$swaptotal}"
        full_text="${full_text/\%swapused/$swapused}"
        full_text="${full_text/\%swapavail/$swapavail}"
    fi
    if [[ -n $short_text ]]; then
        local short_text="${short_text/\%memtotal/$memtotal}"
        short_text="${short_text/\%memused/$memused}"
        short_text="${short_text/\%memavail/$memavail}"
        short_text="${short_text/\%swaptotal/$swaptotal}"
        short_text="${short_text/\%swapused/$swapused}"
        short_text="${short_text/\%swapavail/$swapavail}"
    fi

    block
}

block_pavol() {
    [[ $# -lt 2 ]] && return

    local vol mutestatus
    read -r _ _ _ _ vol <<< "$(pactl get-sink-volume "$1" 2> /dev/null)"
    vol="${vol%% *}"
    [[ -z $vol ]] && return
    vol="${vol//[[:space:]]/}"

    mutestatus="$(pactl get-sink-mute "$1" 2> /dev/null)"
    [[ -z $mutestatus ]] && return
    if [[ $mutestatus == *yes* ]]; then
        mutestatus="$2"
    else
        mutestatus=""
    fi

    if [[ -n $full_text ]]; then
        local full_text="${full_text/\%vol/$vol}"
        full_text="${full_text/\%mutestatus/$mutestatus}"
    fi
    if [[ -n $short_text ]]; then
        local short_text="${short_text/\%vol/$vol}"
        short_text="${short_text/\%mutestatus/$mutestatus}"
    fi

    block
}

block_pwvol() {
    [[ $# -lt 2 ]] && return

    local vol mutestatus
    IFS=" " read -r _ vol mutestatus <<< "$(wpctl get-volume "$1" 2> /dev/null)"
    [[ -z $vol ]] && return
    vol="${vol/./}"
    vol=$((10#$vol))

    if [[ $mutestatus == "[MUTED]" ]]; then
        mutestatus="$2"
    else
        mutestatus=""
    fi

    if [[ -n $full_text ]]; then
        local full_text="${full_text/\%vol/$vol%}"
        full_text="${full_text/\%mutestatus/$mutestatus}"
    fi
    if [[ -n $short_text ]]; then
        local short_text="${short_text/\%vol/$vol%}"
        short_text="${short_text/\%mutestatus/$mutestatus}"
    fi

    block
}

block_datetime() {
    [[ $# -lt 2 ]] && return

    local date
    case $2 in
        printf) printf -v date "%($1)T" "-1";;
        date) date="$(date "+$1")";;
        *) return;;
    esac

    [[ -n $full_text ]] && local full_text="${full_text/\%date/$date}"
    [[ -n $short_text ]] && local short_text="${short_text/\%date/$date}"

    block
}

main() {
    case $1 in
        "help" | "-h" | "--help")
            printf '%b' "Usage: ${0##*/} [-hv] [config-file]\nSee 'man shstatus' for more information\n"
            exit 0
        ;;
        "-v" | "--version") printf "shstatus v1.1.0\n"; exit 0;;
    esac

    # Print the header and begin an infinite array.
    printf '{"version":1}\n[\n'

    local config="/etc/shstatus/config.sh"
    [[ -f "$HOME/.config/shstatus/config.sh" ]] && config="$HOME/.config/shstatus/config.sh"
    [[ -n $1 ]] && config="$1"
    [[ ! -f $config ]] && err "'$config': not a file"

    # shellcheck disable=1090
    source "$config"

    [[ -z $interval ]] && err "interval not specified"
    [[ $(type -t update) != "function" ]] && err "update() is undefined"

    while true; do
        # Begin an array of blocks.
        printf "[\n"

        # Remove the trailing comma and print the blocks.
        blocks="$(update)"
        printf '%s' "${blocks::-1}"

        # End the array.
        printf "\n],\n"
        snore "$interval"
    done
}

main "$@"
